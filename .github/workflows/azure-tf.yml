# This is a GitHub Actions workflow file
name: Plan and Deploy Terraform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # This first job checks which paths (dev or prod) have changed.
  # The outputs (dev_changed, prod_changed) are then used by the other jobs.
  check_paths:
    runs-on: ubuntu-latest
    outputs:
      dev_changed: ${{ steps.filter.outputs.dev }}
      prod_changed: ${{ steps.filter.outputs.prod }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            dev:
              - 'envs/dev/**'
            prod:
              - 'envs/prod/**'

  # ============== DEV ENVIRONMENT JOBS ==============  
  plan_dev:
    name: "Plan: Dev Environment"
    needs: check_paths
    if: github.event_name == 'pull_request' && needs.check_paths.outputs.dev_changed == 'true'
    runs-on: ubuntu-latest
    environment: Azure
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ./envs/dev
    env:
      TF_LOG: "INFO"
      ARM_USE_OIDC: "true"
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4
      - name: Setup Azure CLI OIDC for Dev
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.13.3 }
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Post Plan to PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Init ‚öôÔ∏è`${{ steps.init.outcome }}`
            #### Terraform Format üñåÔ∏è`${{ steps.fmt.outcome }}`
            #### Terraform Validate ü§ñ`${{ steps.validate.outcome }}`
            #### Terraform Plan (Dev) üìñ`${{ steps.plan.outcome }}`

            <details><summary>Show Plan</summary>

            ```\n
            ${process.env.PLAN}

            ```

            </details>

            *Pushed by: @${{ github.actor }}, Action: `${{ github.event_name }}`*`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan (Dev)')
            });

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  apply_dev:
    name: "Apply: Dev Environment"
    needs: check_paths
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check_paths.outputs.dev_changed == 'true'
    runs-on: ubuntu-latest
    environment: Azure
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./envs/dev
    env:
      TF_LOG: "INFO"
      ARM_USE_OIDC: "true"
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4
      - name: Setup Azure CLI OIDC for Dev
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.13.3 }
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

  # ============== PROD ENVIRONMENT JOBS ==============  
  plan_prod:
    name: "Plan: Prod Environment"
    needs: check_paths
    if: github.event_name == 'pull_request' && needs.check_paths.outputs.prod_changed == 'true'
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ./envs/prod
    env:
      TF_LOG: "INFO"
      ARM_USE_OIDC: "true"
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4
      - name: Setup Azure CLI OIDC for Prod
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_PROD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_PROD_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_PROD_SUBSCRIPTION_ID }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.13.3 }
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Post Plan to PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Init ‚öôÔ∏è`${{ steps.init.outcome }}`
            #### Terraform Format üñåÔ∏è`${{ steps.fmt.outcome }}`
            #### Terraform Validate ü§ñ`${{ steps.validate.outcome }}`
            #### Terraform Plan (Prod) üìñ`${{ steps.plan.outcome }}`

            <details><summary>Show Plan</summary>

            ```\n
            ${process.env.PLAN}

            ```

            </details>

            *Pushed by: @${{ github.actor }}, Action: `${{ github.event_name }}`*`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan (Prod)')
            });

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  apply_prod:
    name: "Apply: Prod Environment"
    needs: check_paths
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check_paths.outputs.prod_changed == 'true'
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./envs/prod
    env:
      TF_LOG: "INFO"
      ARM_USE_OIDC: "true"
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4
      - name: Setup Azure CLI OIDC for Prod
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_PROD_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_PROD_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_PROD_SUBSCRIPTION_ID }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.13.3 }
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
