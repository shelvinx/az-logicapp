# This is a GitHub Actions workflow file
name: Plan and Deploy Terraform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # This first job checks which paths (dev or prod) have changed.
  # The outputs (dev_changed, prod_changed) are then used by the other jobs.
  check_paths:
    runs-on: ubuntu-latest
    outputs:
      dev_changed: ${{ steps.filter.outputs.dev }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            dev:
              - 'envs/dev/**'

  # ============== DEV ENVIRONMENT JOBS ==============  
  plan_dev:
    name: "Plan: Dev Environment"
    needs: check_paths
    if: github.event_name == 'pull_request' && needs.check_paths.outputs.dev_changed == 'true'
    runs-on: ubuntu-latest
    environment: Azure
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: ./envs/dev
    env:
      TF_LOG: "INFO"
      ARM_USE_OIDC: "true"
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4
      - name: Setup Azure CLI OIDC for Dev
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.13.3 }
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      # 5. Terraform Plan
      # -no-color removes ANSI color codes for clean output
      # The output is saved to the 'plan' step output variable
      - name: Terraform Plan
        id: plan
        run: |
          PLAN_OUTPUT=$(terraform plan -no-color -input=false)
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          echo "$PLAN_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 6. Post Plan as PR Comment
      # Uses github-script to create or update a comment
      - name: Post Terraform Plan to PR
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### üìù Terraform Plan üìù
            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.plan_output }}
            \`\`\`

            </details>`;

            const comment_tag = "";
            const full_output = output + "\n\n" + comment_tag;

            // Find an existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const existing_comment = comments.find(c => c.body.includes(comment_tag));

            // If comment exists, update it
            if (existing_comment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing_comment.id,
                body: full_output
              });
            } else { // Otherwise, create a new one
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: full_output
              });
            }
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  apply_dev:
    name: "Apply: Dev Environment"
    needs: check_paths
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check_paths.outputs.dev_changed == 'true'
    runs-on: ubuntu-latest
    environment: Azure
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./envs/dev
    env:
      TF_LOG: "INFO"
      ARM_USE_OIDC: "true"
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4
      - name: Setup Azure CLI OIDC for Dev
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.13.3 }
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
